package Filters;

import Helper.IgnoreHelper;
import Pipes.Pipe;
import Pipes.StringArrayPipe;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
public class CircularShift implements Filters<String[], String[]>{

	public String[] data;
	public StringArrayPipe inputChannel; 
	public StringArrayPipe outputChannel; 
	
	public CircularShift(Pipe inputChannel, Pipe outputChannel){
		this.inputChannel = (StringArrayPipe) inputChannel;
		this.outputChannel = (StringArrayPipe) outputChannel;
	}
	
	@Override
	public String[] read() throws InterruptedException {
		return (String[]) inputChannel.pop();
	}

	@Override
	public void write(String[] output) {
		outputChannel.push(output);
	}
	
	public String combineStrings(List<String> tmpArr){
		String ans = "";
		for (String tmpStr : tmpArr){
			ans += tmpStr;
		}
		return ans;
	}
	
	public LinkedList<String> CircularShiftForString(String str){
		String[] strings = str.split(" ");
		List<String> tmpArr =new LinkedList<String>();
		int length = 0;
		for (String tmpStr: strings){
			length++;
			tmpArr.add(tmpStr);
		}
		LinkedList<String> ans = new LinkedList<String>();
		for (int i = 0; i < length;i++){
			if (IgnoreHelper.ifIgnore(tmpArr.get(0))){
				ans.add(combineStrings(tmpArr));
			}
			String first = tmpArr.get(0);
			tmpArr.remove(0);
			tmpArr.add(first);
		}
		
		return ans;
	}
	
	public String[] CircularShiftForStrings(){
		List<String> ans = new ArrayList<String>();
		List<String> subans;
		
		for (String tmpStr : data){
			System.out.println(tmpStr);
			subans = CircularShiftForString(tmpStr);
			while (subans.iterator().hasNext()){
				ans.add(subans.iterator().next());
			}
			System.out.println(subans);
		}
		return (String[]) ans.toArray();
		
		
	}
	
	@Override
	public void run() {
		while (true){
			try {
				data = read();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String[] generatedStrings = CircularShiftForStrings();
			write(generatedStrings);
		}
		
	}

}
